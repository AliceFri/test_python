# 逃离大迷宫

# 广度优先搜索 会超时 利用限制条件 压缩地图

#
def isEscapePossible(blocked: list, source: list, target: list) -> bool:
    if not isEscapePossible1(blocked, source, target):
        return False
    return isEscapePossible1(blocked, target, source)


def isEscapePossible1(blocked: list, source: list, target: list) -> bool:
    """

    :param blocked: [(x, y),]
    :param source: [x1, y1]
    :param target: [x2, y2]
    :return: bool
    """
    iLimit = 20000  # 最多包围200个各自
    blocked = {(x, y) for x, y in blocked}
    if len(blocked) <= 1:     # 特殊判断
        return True
    lSearch = [source]
    move = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    search = set()
    while lSearch:
        x, y = lSearch.pop()
        for iAddX, iAddY in move:
            x1, y1 = x, y
            x1 += iAddX
            y1 += iAddY
            point = (x1, y1)
            if point in blocked:
                continue
            if point in search:
                continue
            if point == tuple(target):
                return True
            if x1 < 0 or x1 >= 1000000:
                continue
            if y1 < 0 or y1 >= 1000000:
                continue
            search.add(point)
            lSearch.append(point)
            if len(search) >= iLimit:
                return True
    return False


if __name__ == '__main__':
    # print(isEscapePossible([[0, 1], [1, 0]], [0, 0], [0, 2]))
    # print(isEscapePossible([], [0, 0], [0, 2]))
    print(isEscapePossible([[10,9],[9,10],[10,11],[11,10]]
,[0,0]
,[10,10]))

    print(isEscapePossible
,[100024,100072]
,[999994,999990]))

    # l = [list([' '] * 99) for _ in range(100)]
    # for a, b in [[100005, 100073], [100006, 100074], [100007, 100075], [100008, 100076], [100009, 100077], [100010, 100078], [100011,
    #                                                                                                              100079], [
    #     100012, 100080], [100013, 100081], [100014, 100082], [100015, 100083], [100016, 100084], [100017, 100085], [
    #     100018, 100086], [100019, 100087], [100020, 100088], [100021, 100089], [100022, 100090], [100023, 100091], [
    #     100024, 100092], [100025, 100091], [100026, 100090], [100027, 100089], [100028, 100088], [100029, 100087], [
    #     100030, 100086], [100031, 100085], [100032, 100084], [100033, 100083], [100034, 100082], [100035, 100081], [
    #     100036, 100080], [100037, 100079], [100038, 100078], [100039, 100077], [100040, 100076], [100041, 100075], [
    #     100042, 100074], [100043, 100073], [100044, 100072], [100043, 100071], [100042, 100070], [100041, 100069], [
    #     100040, 100068], [100039, 100067], [100038, 100066], [100037, 100065], [100036, 100064], [100035, 100063], [
    #     100034, 100062], [100033, 100061], [100032, 100060], [100031, 100059], [100030, 100058], [100029, 100057], [
    #     100028, 100056], [100027, 100055], [100026, 100054], [100025, 100053], [100024, 100052], [100023, 100053], [
    #     100022, 100054], [100021, 100055], [100020, 100056], [100019, 100057], [100018, 100058], [100017, 100059], [
    #     100016, 100060], [100015, 100061], [100014, 100062], [100013, 100063], [100012, 100064], [100011, 100065], [
    #     100010, 100066], [100009, 100067], [100008, 100068], [100007, 100069], [100006, 100070], [100005, 100071]]:
    #     a = a % 100
    #     b = b % 100
    #     l[a][b] = 'x'
    # l[24][72] = 'S'
    # for i in range(100):
    #     print(l[i])